<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yz&#39;s Blog</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-10-27T11:34:01.667Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>csapp:week2总结</title>
    <link href="http://yoursite.com/2020/10/25/csapp-week2%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/10/25/csapp-week2%E6%80%BB%E7%BB%93/</id>
    <published>2020-10-25T09:52:27.000Z</published>
    <updated>2020-10-27T11:34:01.667Z</updated>
    
    <content type="html"><![CDATA[<h3 id="csapp-week-2-总结"><a href="#csapp-week-2-总结" class="headerlink" title="csapp week 2 总结"></a>csapp week 2 总结</h3><ul><li><p>字节：8个位</p></li><li><p>计算机通过2进制码，进行执行，大部分计算机系统使用ASCII码表示文本字符</p></li><li><p>程序的生命周期</p><ul><li>预处理阶段：告诉预处理读取所需的系统头文件，并把它插入到程序文本中，得到完整的程序并生成 .i文件</li><li>编译阶段：编译器将文本文件hello.i翻译成文本文件hello.s，它包含一个汇编语言程序</li><li>汇编阶段：汇编器将hello.s翻译成机器语言指令，把这些指令打包成可重定位目标程序的格式，并将结果保存在文件hello.o文件中，它是一个二进制文件</li><li>链接阶段：程序中调用的其他的函数指令，例如printf函数，它会把预编译好的printf.o以某种方式合并到hello.o程序中去，链接器就负责处理这种合并，结果就得到hello文件，他是一个可以执行文件，可以被加载到内存中，由系统执行<br><img src="/2020/10/25/csapp-week2总结/image-20201025171329299.png" alt="image-20201025171329299"></li><li>把import所需的类插入到程序  -&gt; 编译成汇编代码  -&gt; 汇编代码  -&gt; 二进制代码  -&gt; 链接所需库的预编译文件  -&gt;可执行文件</li></ul></li><li><p>系统的硬件组成</p><ul><li>总线：贯穿整个系统，它携带信息字节并负责在各个部件间传递，总线被设计成传送定长的字节块，也就是字，32位4字节，64位8字节</li><li>I/O设备：输入输出设备是系统与外部的通道，每个I/O设备都通过一个控制器或适配器与I/O总线连接</li><li>主存：是一个临时存储设备，用来存放程序和程序处理的数据</li><li>处理器：cpu<ul><li>加载：从主存复制一个字节或者一个字到寄存器，覆盖寄存器原来的内容</li><li>存储：从寄存器复制一个字节或一个字到主存的某个位子，覆盖原来的内容</li><li>操作：把两个寄存器的内容复制的ALU（算术逻辑单元），ALU对这两个做算术运算，并将结果存放到一个寄存器中，覆盖该寄存器原来的内容</li><li>跳转：从指令本身抽取一个字，并将这个字复制到程序计数器（下一条指令）中，已覆盖原来的值</li></ul></li></ul></li><li><p>运行hello程序</p><p> <img src="/2020/10/25/csapp-week2总结/image-20201025171439942.png" alt="image-20201025171439942"></p><ul><li><p>加载可执行文件hello，hello中的代码从磁盘复制到主存中</p></li><li><p>利用直接存储器存取（DMA）</p><p><img src="/2020/10/25/csapp-week2总结/image-20201025171803588.png" alt="image-20201025171803588"></p></li><li><p>一但hello的代码和数据被加载到主存中，处理器就开始执行hello程序的main程序中的机器语言指令，将字符串的字节从主存复制到寄存器，在从寄存器文件复制到显示设备</p><p><img src="/2020/10/25/csapp-week2总结/image-20201025172026065.png" alt="image-20201025172026065"></p></li></ul></li><li><p>高速缓存</p><ul><li>程序运行时候，从磁盘复制到主存，主存复制到寄存器，系统设计主要目的就是使这些复制操作尽可能快的完成，针对处理器与与主存之间的差异，采用的更小更快的设备称为高速缓存存储器，作为暂时的集结区域，存放处理器近期可能会需要的信息。</li><li>利用高速缓存将程序的性能提高一个数量级，原理就是预先读取数据，用到的时候直接从缓存取。</li></ul></li><li><p>操作系统管理硬件</p><ul><li><p>操作系统有两个基本功能：1.防止硬件失控的应用程序滥用，2.控制复杂的硬件设备，通过几个抽象概念（进程、虚拟内存、文件）</p><ul><li><p>进程：进程是操作系统对一个正在运行的程序的一种抽象，在一个系统上可以运行多个进程，一个进程的指令和另一个进程的指令是交错执行的称为上下文切换</p></li><li><p>保持跟踪进程运行所需的所有状态信息：上下文，用于恢复进程时候使用（要知道进程执行到哪里了）</p><p><img src="/2020/10/25/csapp-week2总结/image-20201025173249842.png" alt="image-20201025173249842"></p></li><li><p>线程：一个进程中由多个线程的执行单元组成，每个线程都运行在进程的上下文中，并共享同样的代码和全局数据</p></li><li><p>虚拟内存：它为每个进程提供了一个假象，即每个进程都在独占的使用主存。</p></li><li><p>虚拟地址空间：每个进程看到的内存都是一致的。</p><p><img src="/2020/10/25/csapp-week2总结/image-20201025173652830.png" alt="image-20201025173652830"></p><p>地址空间最上面的区域是保留给操作系统中的代码和数据</p><p>地址底部是存放用户进程定义的代码和数据        </p><ul><li>程序代码和数据：对于所有进程来说，都是从同一固定位置开始的</li><li>堆：运行时候堆，可以动态伸缩</li><li>共享库：存放标准库代码和数据的区域</li><li>栈：编译器用它来实现函数调用，可伸缩</li><li>内核虚拟内存：为内核保留的区域，不允许程序读写这个区域的内容</li></ul></li><li><p>文件：字节序列</p></li></ul></li></ul></li><li><p>系统之间利用网络通信</p><p><img src="/2020/10/25/csapp-week2总结/image-20201025174426948.png" alt="image-20201025174426948"></p><p><img src="/2020/10/25/csapp-week2总结/image-20201025174437314.png" alt="image-20201025174437314"></p></li><li><p>并发：指一个同时具有多个活动，两个人抢一个厕所</p></li><li><p>并行：一次同时运行多个，两个人同时上厕所，一人一个厕所</p></li><li><p>指令级并行：流水线</p></li><li><p>抽象概念</p><p><img src="/2020/10/25/csapp-week2总结/image-20201025174746950.png" alt="image-20201025174746950"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;csapp-week-2-总结&quot;&gt;&lt;a href=&quot;#csapp-week-2-总结&quot; class=&quot;headerlink&quot; title=&quot;csapp week 2 总结&quot;&gt;&lt;/a&gt;csapp week 2 总结&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;字节：8个位&lt;/p</summary>
      
    
    
    
    
    <category term="深入理解计算机系统" scheme="http://yoursite.com/tags/深入理解计算机系统/"/>
    
  </entry>
  
  <entry>
    <title>操作系统导论:week1总结</title>
    <link href="http://yoursite.com/2020/10/17/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AF%BC%E8%AE%BA-week1%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/10/17/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AF%BC%E8%AE%BA-week1%E6%80%BB%E7%BB%93/</id>
    <published>2020-10-17T07:53:35.000Z</published>
    <updated>2020-10-25T09:54:37.862Z</updated>
    
    <content type="html"><![CDATA[<h3 id="操作系统导论week1总结"><a href="#操作系统导论week1总结" class="headerlink" title="操作系统导论week1总结"></a>操作系统导论week1总结</h3><ul><li><p>为什么有操作系统？</p><ul><li><p>我们来看看在没有操作系统的时候，冯·诺依曼（Von Neumann）体系，这里举一个程序运行的例子：处理器从内存中获取指令，然后进行解码（弄清楚是哪条指令），然后执行它，如两个数进行相加、访问内存、检查条件、跳转函数等，为了简化，人们在上层添加了操作系统层，使得程序与设备或者资源交互更加容易，让编写程序的人不在担心如何与设备进行交互，更加的关心程序想要达到什么目的，操作系统对外暴露了很多接口，我们只需要关心接口如何使用，而不在担心如何接口如何实现。</p></li><li><p>它取得CPU、内存或磁盘等物理资源（resources），并对它们进行虚拟化（virtualize）。它处理与并发（concurrency）有关的麻烦且棘手的问题。它持久地（persistently）存储文件，从而使它们长期安全。鉴于我们希望建立这样一个系统，所以要有一些目标，以帮助我们集中设计和实现，并在必要时进行折中。找到合适的折中是建立系统的关键。</p></li></ul></li><li><p>什么是操作系统？</p><ul><li>可以容易的让程序运行变得容易，允许程序共享内存，能够让设备与程序进行交互。</li></ul></li><li><p>虚拟化</p><ul><li><p>虚拟化CPU</p><ul><li><p>操作系统负责提供这种假象（illusion），即系统拥有非常多的虚拟CPU的假象。将单个CPU（或其中一小部分）转换为看似无限数量的CPU，从而让许多程序看似同时运行，这就是所谓的虚拟化CPU（virtualizingthe CPU）。</p></li><li><p>它是如何制造虚拟化CPU？</p><ul><li>我们知道在还没有操作系统的时候（条件为单核CPU），如果运行一个程序那么只能等这个程序执行完毕之后才能执行下一个程序，为了可以执行多个程序，操作系统将CPU的资源分割成时间片，让执行变成以时间片为单位，例如我运行多个程序，程序1获得了时间片那么程序1就得以执行，程序2此时获得了时间片程序2得以执行，然后进行来回的切换，在多个程序之间切换我们称为，上下文切换，只是切换的速度很快，对于用户来说感知不到，这就是时分共享（time sharing），是操作系统共享资源所使用的最基本的技术之一。通过允许资源由一个实体使用一小段时间，然后由另一个实体使用一小段时间，如此下去，所谓的资源（例如，CPU或网络链接）可以被许多人共享。</li></ul></li></ul></li><li><p>虚拟化内存</p><ul><li><p>我们知道访问内存必须知道地址，知道地址才能读入，更新内存。</p></li><li><p>每个进程都有自己的私有虚拟地址空间，操作系统以某种方式映射到机器的物理内存上。</p></li></ul></li></ul></li><li><p>并发</p><ul><li>例如运行一个不断的累加的程序，有很多并发执行的线程，在操作同一个内存空间，如果代码不谨慎，此时有可能存在不正确的结果，程序将计数器的值从内存加载到寄存器，然后递增，再然后保存回内存。但指令并不是以原子方式（atomically）执行（所有的指令一次性执行）的，所以奇怪的事情可能会发生</li></ul></li><li><p>持久性</p><ul><li><p>在操作系统中存储数据，而管理这些数据通常被称为文件系统（file system），因此它负责以可靠和高效的方式，将用户创建的任何文件（file）存储在系统的磁盘上。</p></li><li><p>在操作系统上操作文件，分为三步：</p><ul><li><p>第一步open()打开文件。</p></li><li><p>第二个是write()，将一些数据写入文件。</p></li><li><p>第三个是close()，只是简单地关闭文件，从而表明程序不会再向它写入更多的数据</p></li></ul></li></ul></li><li><p>进程</p><ul><li><p>进程就是运行中的程序，一个进程只是一个正在运行的程序</p></li><li><p>机器状态（machine state）：程序在运行时可以读取或更新的内容</p><ul><li><p>内存：正在运行的程序读取和写入的数据也在内存中。因此进程可以访问的内存（称为地址空间，address space）</p></li><li><p>寄存器：许多指令明确地读取或更新寄存器，因此显然，它们对于执行该进程很重要</p></li><li><p>程序计数器（ProgramCounter，PC）：告诉我们程序当前正在执行哪个指令</p></li><li><p>栈指针（stackpointer）：管理函数参数栈、局部变量</p></li><li><p>帧指针（frame pointer）：返回地址</p></li></ul></li><li><p>API</p><ul><li><p>创建（create）：操作系统必须包含一些创建新进程的方法。</p></li><li><p>销毁（destroy）：由于存在创建进程的接口，因此系统还提供了一个强制销毁进程的接口。</p></li><li><p>等待（wait）：有时等待进程停止运行是有用的，因此经常提供某种等待接口。</p></li><li><p>其他控制（miscellaneous control）：除了杀死或等待进程外，有时还可能有其他控制。</p></li><li><p>状态（statu）：通常也有一些接口可以获得有关进程的状态信息，例如运行了多长时间，或者处于什么状态。<img src="/2020/10/17/操作系统导论-week1总结/01.jpg" alt="img"></p></li></ul></li><li><p>数据结构</p><ul><li>操作系统追踪进程的一些重要信息。对于停止的进程，寄存器上下文将保存其寄存器的内容。当一个进程停止时，它的寄存器将被保存到这个内存位置。通过恢复这些寄存器（将它们的值放回实际的物理寄存器中），操作系统可以恢复运行该进程。<img src="/2020/10/17/操作系统导论-week1总结/02.jpg" alt="img"></li></ul></li><li><p>进程API的使用</p><ul><li><p>fork()系统调用</p><ul><li>会从本进程copy一个进程，此时子进程会进行初始化，它拥有自己的地址空间（即拥有自己的私有内存）、寄存器、程序计数器，通过返回值可以判断父子进程，返回值等于0则是子进程，至于什么时候子进程执行，我们不能掌控，有可能在父进程调用的fork()之后或者之前，CPU调度程序（scheduler）决定了某个时刻哪个进程被执行。</li></ul></li><li><p>wait()系统调用</p><ul><li>父进程需要等待子进程执行完毕，可以用wait()来控制进程执行顺序</li></ul></li><li><p>exec()系统调用</p><ul><li>可以创建一个进程运行其他程序，fork()是copy，exec()则是让你自由选择。</li></ul></li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;操作系统导论week1总结&quot;&gt;&lt;a href=&quot;#操作系统导论week1总结&quot; class=&quot;headerlink&quot; title=&quot;操作系统导论week1总结&quot;&gt;&lt;/a&gt;操作系统导论week1总结&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;为什么有操作系统？&lt;/p&gt;
&lt;ul</summary>
      
    
    
    
    
    <category term="操作系统" scheme="http://yoursite.com/tags/操作系统/"/>
    
  </entry>
  
  <entry>
    <title>操作系统:开篇</title>
    <link href="http://yoursite.com/2020/10/13/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%BC%80%E7%AF%87/"/>
    <id>http://yoursite.com/2020/10/13/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%BC%80%E7%AF%87/</id>
    <published>2020-10-13T14:22:58.000Z</published>
    <updated>2020-10-14T11:10:05.630Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>如何学习操作系统？<br>  在有了一定的组成原理的知识之后，开始了操作系统的学习，<br>  咨询了相关大佬后，推荐了我操作系统导论这本书 + xv6(MIT 6.828)。</p><p>  此书围绕三个主题开展对操作系统的介绍：</p><ul><li>虚拟化（virtualization）</li><li>并发（concurrency）</li><li>持久性（persistence）</li></ul></li><li><p>为什么要学习操作系统？</p><ul><li>了解操作系统如何做到运行多个程序？</li><li>了解操作系统里的基本概念：什么是进程、线程、以及为什么线程之间会有许多问题？</li><li>了解操作系统是怎么进行调度的？</li><li>了解操作系统如何进行文件管理？</li></ul></li><li>学了之后有什么用<ul><li>在学习完之后，会对程序在操作系统后如何运行和管理的，有一个全貌的了解<br>对组成原理的知识能够串联起来，对于多线程编程会更加清晰，学习JVM也会变得更加简单…</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如何学习操作系统？&lt;br&gt;  在有了一定的组成原理的知识之后，开始了操作系统的学习，&lt;br&gt;  咨询了相关大佬后，推荐了我操作系统导论这本书 + xv6(MIT 6.828)。&lt;/p&gt;
&lt;p&gt;  此书围绕三个主题开展对操作系统的介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;</summary>
      
    
    
    
    
    <category term="操作系统" scheme="http://yoursite.com/tags/操作系统/"/>
    
  </entry>
  
  <entry>
    <title>数据结构:线索二叉树</title>
    <link href="http://yoursite.com/2020/10/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yoursite.com/2020/10/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2020-10-13T13:31:04.000Z</published>
    <updated>2020-10-13T14:17:54.965Z</updated>
    
    <content type="html"><![CDATA[<ul><li>我们知道在二叉树中有三种遍历序列：前序遍历、中序遍历、后序遍历，可以很方便的找到某个节点的左右孩子（二叉链表实现），但是我们要获取某种遍历序列中的前驱节点或后继节点就会变得很困难。</li><li><p>解决办法：</p><ul><li>通过遍历寻找，需要耗费时间</li><li>通过空间换时间（把孩子节点为NULL的节点，设置序列中的前驱和后继节点），<br>这样就可以快速的访问到序列中的前驱后后继了<br><img src="/2020/10/13/数据结构-线索二叉树/01.png" alt="image"></li></ul></li><li><p>结构实现：<br>​    <img src="/2020/10/13/数据结构-线索二叉树/02.png" alt="image"></p></li><li><p>初始化<br>​    <img src="/2020/10/13/数据结构-线索二叉树/03.png" alt="image"></p></li><li><p>遍历<br><img src="/2020/10/13/数据结构-线索二叉树/04.png" alt="image"></p><ul><li>visit(p)为访问该节点</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;我们知道在二叉树中有三种遍历序列：前序遍历、中序遍历、后序遍历，可以很方便的找到某个节点的左右孩子（二叉链表实现），但是我们要获取某种遍历序列中的前驱节点或后继节点就会变得很困难。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解决办法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过遍历寻找，需要</summary>
      
    
    
    
    
    <category term="数据结构" scheme="http://yoursite.com/tags/数据结构/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-基础铺垫</title>
    <link href="http://yoursite.com/2019/12/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9F%BA%E7%A1%80%E9%93%BA%E5%9E%AB/"/>
    <id>http://yoursite.com/2019/12/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9F%BA%E7%A1%80%E9%93%BA%E5%9E%AB/</id>
    <published>2019-12-01T10:26:46.000Z</published>
    <updated>2020-10-13T16:07:03.705Z</updated>
    
    <content type="html"><![CDATA[<ol><li>数据</li></ol><ul><li>数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。数据不仅仅包括整型，实类等数据类型，还包括最重要的数字和字符等文字数据。这里所说的数据，就是符号，要满足以下两个条件：<ul><li>可以输入到计算机中</li><li>能被计算机程序处理</li></ul></li></ul><ol start="2"><li>数据元素</li></ol><ul><li>数据元素：数据元素是组成数据的基本单位，在计算机中通常作为整体处理，也被称为记录。比如，在人类中，什么是数据元素？当然是人啦。<br>畜类呢？牛、马、羊等动物，当人就是畜类的数据元素。</li></ul><ol start="3"><li>数据项</li></ol><ul><li>数据项：一个数据元素可以由若干个数据项组成。比如人是一个数据元素，可以有眼、耳、鼻、嘴、手、脚这些数据项，也可以是姓名、年龄、出生地址等这些数据项，具体有哪些数据项目，是根据你系统所决定的。<strong>数据项</strong>是<strong>数据</strong>不可分割的<strong>最小单位</strong></li></ul><ol start="4"><li>数据对象</li></ol><ul><li>数据对象：是性质相同的数据元素的集合，是数据的子集。性质相同是指具有相同的数量和类型的数据项，比如，人都有姓名、生日、性别等相同的数据项。在实际应用中，处理的数据元素通常具有相同性质，在不产生混淆的情况下，我们都将数据对象简称为数据。</li></ul><ol start="5"><li>数据结构</li></ol><ul><li>结构：所谓结构简单理解就是关系，比如分子结构，就是组成分子的原子之间的排列方式。不同的数据元素之间不是独立的，而是存在特定关系，我们将这些关系称为结构。</li><li>数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。</li></ul><ol start="6"><li>定义中的一种或多种特定关系，具体是什么样的关系？<br>按照视点不同，我们把<strong>数据结构分为逻辑结构与物理结构</strong>。</li><li>逻辑结构</li></ol><ul><li><p>逻辑结构：是指数据对象中数据元素之间的相互关系。</p><ul><li>集合结构：集合结构中的数据元素除了同属于一个集合外，它们之间没有任何关系，可以理解为数学中的集合。<br><img src="/2019/12/01/数据结构-基础铺垫/01.png" alt="image"></li><li>线性结构：线性结构中的数据元素之间是一对一的关系。<br><img src="/2019/12/01/数据结构-基础铺垫/02.png" alt="image"></li><li>树形结构：树形结构中的数据元素之间存在一种一对多的层次关系。例如，计算机的文件系统就是树形的。<br><img src="/2019/12/01/数据结构-基础铺垫/03.png" alt="image"></li><li>图形结构：图形结构的数据元素是多对多的关系。<br><img src="/2019/12/01/数据结构-基础铺垫/04.png" alt="image"></li></ul><p>逻辑结构是针对具体问题的，是为解决某个问题，在对问题理解的基础上，选择一个合适的数据结构表示数据元素之间的逻辑关系。</p></li></ul><ol start="8"><li><p>物理结构</p><ul><li><p>物理结构：是指数据的逻辑结构在计算机中的存储形式（也叫存储结构）。</p><p>数据是数据元素的集合，那么根据物理结构的定义，我们可以理解为如何把数据元素存储到计算机的存储器中，存储器主要针对内存而言，对于外部存储器数据通常用文件结构去描述。</p><p><strong>数据的存储结构应正确的反映数据元素之间的逻辑关系，这才是最为关键的，如何存储数据元素的逻辑关系，是实现物理结构（在计算机中）的难点与重点</strong></p><p>数据元素的存储结构形式有两种：顺序存储和链式存储</p></li><li><p>顺序存储结构<br>顺序存储结构：是把数据元素放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。说白了就是排队占位，谁也别插谁的队。在计算机语言中往往表现为数组。<br><img src="/2019/12/01/数据结构-基础铺垫/05.png" alt="image"></p></li><li><p>链式存储结构<br>链式存储结构：是把数据元素放在任意的存储单元里，这组存储单元是可以连续的，也可以是不连续的。<br>比如现在的银行、医院，都设置了排队系统，每个人去了都是先领一个号，等叫到时候去办理业务或看病。而这里的数据元素总在变化，整个结构都处于变化之中。</p><p>数据元素的存储关系不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，这样就能通过地址找到相关联数据元素的位置</p><p><img src="/2019/12/01/数据结构-基础铺垫/06.png" alt="image"></p><p>显然，链式存储结构非常灵活，数据存在哪里并不重要，只需要有一个指针存放了相应的地址就能找到它了。</p><p>逻辑结构是面向问题的，而物理结构是面向计算机的，其基本的目标就是将数据及其逻辑关系存储到计算机内存中。    </p></li></ul></li><li><p>数据类型</p><ul><li><p>数据类型：是指一组性质相同的值的集合及定义在此集合中的一些操作的总称。</p><p>在现实世界中，大家都需要住房子，也都希望房子越大越好。但显然，没有钱。于是就出现了各种各样的房型，有别墅，有错层的，有单间的……，这样就满足了不同人的需要。</p><p>在计算机里也是如此，比如你要计算计算1+1=2、3+5=8，可以使用整型数字进行加减运算，显然不需要开辟很大的适合小数甚至字符运算的内存空间，于是就有了各种各样的数据类型。在c语言中，按照取值不同，数据类型可以分为两类：</p></li><li>原子类型：是不可以在分解的基本类型，包括整型、实型、字符型等。</li><li><p>结构类型：由若干个类型组合而成，是可以再次分解的。例如，整型数组是由若干个整型数据组成的。</p><p>对于编程者来说，运算出结果才是他所关心的，根本不在乎cpu实现1+2进行了几次开关操作，所以我们就会考虑无论什么计算机，什么计算机语言，都会用到整数运算、实数运算、字符运算等操作，我们可以考虑把他们抽象出来。</p><p>抽象是指抽取出事物具有的普遍性的本质，抽象是一种思考问题的方式，他隐藏了繁杂的细节，只保留了实现目标所必须的信息，如计算机当中的接口、API。</p></li></ul></li><li><p>抽象数据类型<br>抽象数据类型（Abstract Data Type,ADT）：是指一个数学模型定义在该模型上的一组操作。</p><p>比如刚才的例子，不管是什么计算机上，都拥有“整型”类型，也需要整数间的运算，那么整型就是一个抽象数据类型。因此，“抽象”的意义在于数据类型的数学抽象特性。</p><p>比如表示一个点，可以定义为point类型，2D的一个点可以用坐标(x,y)需要2个整型变量，3D中用(x,y,z)需要3个整型变量，这样就可以非常方便的操作一个point数据变量就能知道这一点的坐标了。</p></li></ol><h3 id="用图来总结一下吧："><a href="#用图来总结一下吧：" class="headerlink" title="用图来总结一下吧："></a>用图来总结一下吧：</h3><p><img src="/2019/12/01/数据结构-基础铺垫/07.png" alt="image"><br><img src="/2019/12/01/数据结构-基础铺垫/08.png" alt="image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;数据&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。数据不仅仅包括整型，实类等数据类型，还包括最重要的数字和字符等文字数据。这里所说的数据，就是符号，要满足以下两个条</summary>
      
    
    
    
    
    <category term="数据结构" scheme="http://yoursite.com/tags/数据结构/"/>
    
  </entry>
  
  <entry>
    <title>英语二-句子的构成</title>
    <link href="http://yoursite.com/2019/04/21/%E8%8B%B1%E8%AF%AD%E4%BA%8C-%E5%8F%A5%E5%AD%90%E7%9A%84%E6%9E%84%E6%88%90/"/>
    <id>http://yoursite.com/2019/04/21/%E8%8B%B1%E8%AF%AD%E4%BA%8C-%E5%8F%A5%E5%AD%90%E7%9A%84%E6%9E%84%E6%88%90/</id>
    <published>2019-04-21T15:15:29.000Z</published>
    <updated>2020-10-13T16:17:07.320Z</updated>
    
    <content type="html"><![CDATA[<h4 id="句子的构成"><a href="#句子的构成" class="headerlink" title="句子的构成"></a>句子的构成</h4><p><img src="/2019/04/21/英语二-句子的构成/01.png" alt="image"></p><h4 id="复合主语和复合动词"><a href="#复合主语和复合动词" class="headerlink" title="复合主语和复合动词"></a>复合主语和复合动词</h4><p><img src="/2019/04/21/英语二-句子的构成/02.png" alt="image"></p><h4 id="句子种类"><a href="#句子种类" class="headerlink" title="句子种类"></a>句子种类</h4><p><img src="/2019/04/21/英语二-句子的构成/03.png" alt="image"></p><h4 id="主语位置"><a href="#主语位置" class="headerlink" title="主语位置"></a>主语位置</h4><p><img src="/2019/04/21/英语二-句子的构成/04.png" alt="image"></p><h4 id="助动词"><a href="#助动词" class="headerlink" title="助动词"></a>助动词</h4><p><img src="/2019/04/21/英语二-句子的构成/05.png" alt="image"></p><h4 id="宾语"><a href="#宾语" class="headerlink" title="宾语"></a>宾语</h4><p><img src="/2019/04/21/英语二-句子的构成/06.png" alt="image"></p><h4 id="补语"><a href="#补语" class="headerlink" title="补语"></a>补语</h4><p><img src="/2019/04/21/英语二-句子的构成/07.png" alt="image"></p><h4 id="常见的不完整句子"><a href="#常见的不完整句子" class="headerlink" title="常见的不完整句子"></a>常见的不完整句子</h4><p><img src="/2019/04/21/英语二-句子的构成/08.png" alt="image"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="/2019/04/21/英语二-句子的构成/09.png" alt="image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;句子的构成&quot;&gt;&lt;a href=&quot;#句子的构成&quot; class=&quot;headerlink&quot; title=&quot;句子的构成&quot;&gt;&lt;/a&gt;句子的构成&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/2019/04/21/英语二-句子的构成/01.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="英语二" scheme="http://yoursite.com/tags/英语二/"/>
    
  </entry>
  
  <entry>
    <title>高等数学工专-实数1</title>
    <link href="http://yoursite.com/2019/04/21/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E5%B7%A5%E4%B8%93-%E5%AE%9E%E6%95%B01/"/>
    <id>http://yoursite.com/2019/04/21/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E5%B7%A5%E4%B8%93-%E5%AE%9E%E6%95%B01/</id>
    <published>2019-04-21T05:18:40.000Z</published>
    <updated>2020-10-13T16:17:07.296Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实数"><a href="#实数" class="headerlink" title="实数"></a>实数</h3><ul><li><h4 id="符号表示"><a href="#符号表示" class="headerlink" title="符号表示"></a>符号表示</h4><ul><li><p><strong>实数集 R</strong></p></li><li><p><strong>有理数  Q</strong></p></li><li><p><strong>整数 Z</strong></p></li><li><p><strong>自然数集  N</strong></p></li></ul></li><li><h4 id="集合表示方法"><a href="#集合表示方法" class="headerlink" title="集合表示方法"></a>集合表示方法</h4><ul><li>列举法：A = {1,2,3,4}</li><li>属性法：B = {x|1&lt;x&lt;2}</li></ul></li><li><h4 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h4><ul><li>开区间：(a,b) 表示不包含两个端点a，b。</li><li>闭区间：[a,b] 表示包含两个端点a，b。</li><li>半开半闭区间：(a,b] , [a,b)。</li></ul></li><li><h4 id="邻域"><a href="#邻域" class="headerlink" title="邻域"></a>邻域</h4>  特殊区间 (α-δ,α+δ) 记为 U(α,δ) 即 U(α,δ)=(α-δ,α+δ)。<br>  <img src="/2019/04/21/高等数学工专-实数1/01.png" alt="image"></li><li><h4 id="去心领域"><a href="#去心领域" class="headerlink" title="去心领域"></a>去心领域</h4>  只考虑点a邻近的点，不考虑点a，即 {x|x-δ&lt;x&lt;a且a&lt;x&lt;a+δ} ，我们称这个点集为a的 去心邻域，记作U°(a,δ)={x|x-δ&lt;x&lt;a且a&lt;x&lt;a+δ}。<br>  <img src="/2019/04/21/高等数学工专-实数1/02.png" alt="image"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;实数&quot;&gt;&lt;a href=&quot;#实数&quot; class=&quot;headerlink&quot; title=&quot;实数&quot;&gt;&lt;/a&gt;实数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;符号表示&quot;&gt;&lt;a href=&quot;#符号表示&quot; class=&quot;headerlink&quot; title=&quot;符号表示&quot;&gt;&lt;/</summary>
      
    
    
    
    
    <category term="高等数学工专" scheme="http://yoursite.com/tags/高等数学工专/"/>
    
  </entry>
  
  <entry>
    <title>高等数学工专-导学</title>
    <link href="http://yoursite.com/2019/04/21/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E5%B7%A5%E4%B8%93-%E5%AF%BC%E5%AD%A6/"/>
    <id>http://yoursite.com/2019/04/21/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E5%B7%A5%E4%B8%93-%E5%AF%BC%E5%AD%A6/</id>
    <published>2019-04-21T05:15:30.000Z</published>
    <updated>2020-10-13T16:17:07.333Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/04/21/高等数学工专-导学/01.png" alt="image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2019/04/21/高等数学工专-导学/01.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="高等数学工专" scheme="http://yoursite.com/tags/高等数学工专/"/>
    
  </entry>
  
  <entry>
    <title>概率前置知识</title>
    <link href="http://yoursite.com/2019/04/21/%E6%A6%82%E7%8E%87%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2019/04/21/%E6%A6%82%E7%8E%87%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</id>
    <published>2019-04-21T05:00:09.000Z</published>
    <updated>2020-10-13T16:17:51.025Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="两个基本原理"><a href="#两个基本原理" class="headerlink" title="两个基本原理"></a>两个基本原理</h4><ul><li>乘法<ul><li>定义：完成某事要k个步骤，第一步有m1种方法，第二步有m2种方法…..，第k步有mk种方法，则完成此事共有m1<em>m2……</em>mk种方法。</li><li>例：甲城到乙城有3条旅游路线，乙城到丙城有2条旅游路线，则甲城到丙城共有<br>3 * 2 = 6 条旅游路线。</li></ul></li><li>加法<ul><li>定义：完成某事要k类途径，第一类有m1种方法，第二类有m2种方法……第k类有mk种方法，则完成此事共有m1+m2……+mk种方法。</li><li>例： 甲城到乙城有3类交通工具：汽车、火车、飞机，分别有5，3，2个班次，则甲城到乙城共有5 + 3 + 2 = 10个班次可选择。<h4 id="排列"><a href="#排列" class="headerlink" title="排列"></a>排列</h4></li></ul></li><li>排列<ul><li>定义：从n个不同球种取m(0&lt;m≤n)个，按一定顺序排成一列，称此为一个排列，其排列（或取法）的总数记为<img src="/2019/04/21/概率前置知识/01.png" alt="image"></li><li>例：用1，2，3，4，5这5个数字可以组成多少个无重复的三位数？<img src="/2019/04/21/概率前置知识/02.png" alt="image"></li></ul></li><li>可重复排列<ul><li>定义：从n个不同球中每次取出一个，放回后再取一个，连续取r次得到的排列称为可重复排列，此排列总数（或取法有）n^r 种。</li><li>例：用1，2，3，4，5这5个数字可以组成多少个三位数？5 ^ 3 = 125 </li></ul></li><li>组合<ul><li>定义：从n个不同球中任取m(0&lt;m≤n)个，不计顺序拼成一组，称此为一个组合，其组合（或取法）的总数记为<img src="/2019/04/21/概率前置知识/03.png" alt="image"></li><li>规定 <img src="/2019/04/21/概率前置知识/04.png" alt="image"></li><li>性质 <img src="/2019/04/21/概率前置知识/05.png" alt="image"></li><li>例：某批产品合格品100件、次品5件，从中任取3件，其中恰有1件次品，有多少种不同的取法？<img src="/2019/04/21/概率前置知识/06.png" alt="image"></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前置知识&quot;&gt;&lt;a href=&quot;#前置知识&quot; class=&quot;headerlink&quot; title=&quot;前置知识&quot;&gt;&lt;/a&gt;前置知识&lt;/h3&gt;&lt;h4 id=&quot;两个基本原理&quot;&gt;&lt;a href=&quot;#两个基本原理&quot; class=&quot;headerlink&quot; title=&quot;两个基本原</summary>
      
    
    
    
    
    <category term="概率" scheme="http://yoursite.com/tags/概率/"/>
    
  </entry>
  
  <entry>
    <title>构建JavaScript知识体系</title>
    <link href="http://yoursite.com/2018/11/25/%E6%9E%84%E5%BB%BAJavaScript%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    <id>http://yoursite.com/2018/11/25/%E6%9E%84%E5%BB%BAJavaScript%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/</id>
    <published>2018-11-25T12:04:05.000Z</published>
    <updated>2020-10-13T16:07:03.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="README"><a href="#README" class="headerlink" title="README"></a>README</h2><p>如何构建自己的知识体系，首先我参考了以下几个关于JavaScript的网页</p><ul><li><a href="https://zh.javascript.info/" target="_blank" rel="noopener">现代Javascript教程</a></li><li><a href="https://wangdoc.com/javascript/" target="_blank" rel="noopener">阮一峰标准参考教程(alpha)</a></li><li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6 入门</a></li></ul><p>关于为什么ES6是该知识体系的一部分？</p><ul><li>ES6对于现代Web技术是非常重要的！</li><li>它添加了许多特性</li><li>重新定义的JavaScript的严谨性</li></ul><p>关于为什么要构建知识体系，构建知识体系是对知识的梳理，以便于重新审视自己的遗漏的知识点</p><h2 id="路线"><a href="#路线" class="headerlink" title="路线"></a>路线</h2><ul><li>JavaScript的基本知识<ul><li>1.1 <a href="">Hello, world!</a></li></ul></li><li>代码质量<ul><li>…</li></ul></li><li>Objects（对象）：基础知识</li><li>数据类型</li><li>高级函数</li><li>对象、类和继承</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;README&quot;&gt;&lt;a href=&quot;#README&quot; class=&quot;headerlink&quot; title=&quot;README&quot;&gt;&lt;/a&gt;README&lt;/h2&gt;&lt;p&gt;如何构建自己的知识体系，首先我参考了以下几个关于JavaScript的网页&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a </summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
